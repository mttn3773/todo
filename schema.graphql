### This file was generated by Nexus Schema
### Do not make changes to this file directly


type BatchPayload {
  count: Int!
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

type ErrorField {
  field: String
  message: String
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

"""Mutations for user model"""
type Mutation {
  check(id: Int): Boolean
  createOneTodo(data: TodoCreateInput!): Todo!
  deleteManyTodo(where: TodoWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteOneTodo(where: TodoWhereUniqueInput!): Todo
  deleteOneUser(where: UserWhereUniqueInput!): User

  """Login user mutation"""
  login(password: String!, username: String!): UserResponse

  """Log user out"""
  logout: Boolean
  register(password: String!, username: String!): UserResponse
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

"""Queryes for user model"""
type Query {
  """Returns user data based on session"""
  me: User
  todo(where: TodoWhereUniqueInput!): Todo
  todos(where: TodoWhereInput): [Todo!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Todo {
  body: String!
  completed: Boolean!
  createdAt: DateTime!
  id: Int!
  User: User
  userId: Int
}

input TodoCreateInput {
  body: String!
  completed: Boolean
  createdAt: DateTime
  User: UserCreateOneWithoutTodosInput
}

input TodoListRelationFilter {
  every: TodoWhereInput
  none: TodoWhereInput
  some: TodoWhereInput
}

input TodoWhereInput {
  AND: [TodoWhereInput!]
  body: StringFilter
  completed: BoolFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [TodoWhereInput!]
  OR: [TodoWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
}

input TodoWhereUniqueInput {
  id: Int
}

type User {
  count: Int!
  id: Int!
  password: String!
  todoId: Int
  todos(after: TodoWhereUniqueInput, before: TodoWhereUniqueInput, first: Int, last: Int): [Todo!]!
  token: String
  username: String!
}

input UserCreateOneWithoutTodosInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithouttodosInput
  create: UserCreateWithoutTodosInput
}

input UserCreateOrConnectWithouttodosInput {
  create: UserCreateWithoutTodosInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutTodosInput {
  count: Int
  password: String!
  todoId: Int
  username: String!
}

"""Response for user queryes and mutations. Includes error responses"""
type UserResponse {
  error: ErrorField
  user: User
}

input UserWhereInput {
  AND: [UserWhereInput!]
  count: IntFilter
  id: IntFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  todoId: IntNullableFilter
  todos: TodoListRelationFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: Int
  username: String
}
